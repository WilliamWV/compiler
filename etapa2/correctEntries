//Tipos de usuário
class pessoa [int idade : string nome]
class animal [protected string name : private int eyes]
class fake [public string fals: private string tru]
class oneArg [int o]

//Variáveis globais
g1 int;
g2 static string;
v1[34] static float;
g3 float;
v4 [20] char;
v5 [21] static pessoa;

//Funções
int main(){}
static pessoa someone(int idade, const string name, float alura){}
float Double (float a){}
static int foo(int a, int b){}

//Blocos de comandos - Precisam de mais testes quando comandos simples estiverem disponíveis
int main(){
	{
		//Bloco de comandos como comando simples
	}
}

//Definicao de tipo primitivo sem inicializar
int main(){
	{
		zorzo int;
	}
}

//Definicao de tipo primitivo com static
int main(){
	{
		zorzo static int;
	}
}

//Definicao de tipo primitivo com const
int main(){
	{
		zorzo const int;
	}
}

//Definicao de tipo primitivo com static e const na ordem correta
int main(){
	{
		zorzo static const int;
	}
}

//Definicao de tipo primitivo com static e const na ordem errada
int main(){
	{
		// zorzo const static int; // se descomentar esse dá erro, garantindo a ordem correta
	}
}

//Definicao de tipo primitivo inicializando com identificador
int main(){
	{
		zorzo int <= will;
	}
}

//Definicao de tipo primitivo inicializando com literal
int main(){
	{
		zorzo int <= 12;
		zorzo int <= 22;
		zorzo int <= 12.2;
		zorzo int <= 'w';
		zorzo int <= false;
		zorzo int <= true;
		zorzo int <= "stringzinha bem nice"; // um comentario só pra ver se n vai dar nada
	}
}

//Definicao de variavel com tipo definido pelo usuario
int main(){
	{
		zorzo tipo_usuario;
	}
}

//Definicao de tipo primitivo inicializando com literal
int main(){
	{
		//zorzo tipo_usuario <= 12; // caso descomentado gera erro, pois não podemos inicializar uma variável de tipo definido pelo usuário
	}
}

//atribuicao a um tipo primitivo não-vetor
int main(){
	{
		zorzo = -1;
	}
}
int main(){
	{
		zorzo = +1;
	}
}
int main(){
	{
		zorzo = 1;
	}
}

//atribuicao a um tipo primitivo vetor (NOTAR QUE A EXPRESSAO QUE DETERMINA O INDICE DO VETOR É NEGATIVA)
int main(){
	{
		zorzo[-1] = -1;
	}
}

//atribuicao a um tipo novo não-vetor
int main(){
	{
		zorzo$campo = -1;
	}
}

//atribuicao a um tipo novo vetor
int main(){
	{
		zorzo[-1]$campo = -1;
	}
}

//expressao unaria negativa com literal int
int main(){
	{
		zorzo = -1;
	}
}

//expressao unaria negativa com literal float
int main(){
	{
		zorzo = -1.1;
	}
}

//expressao unaria negativa com identificador
int main(){
	{
		zorzo = -felipe;
	}
}

//expressao unaria negativa com vetor
int main(){
	{
		zorzo = -felipe[-1];
	}
}

//expressao unaria positiva com vetor
int main(){
	{
		zorzo = +felipe[+1];
	}
}

//expressao unaria positiva com vetor com expressao positiva
int main(){
	{
		zorzo = -felipe[+1];
	}
}

//expressao unaria positiva com vetor com expressao negativa
int main(){
	{
		zorzo = +felipe[-1];
	}
}

//expressoes formadas por apenas um operando simples, sem nenhum operador
int main(){
	{
		zorzo = 1;
	}
}
int main(){
	{
		zorzo = 1.2;
	}
}
int main(){
	{
		zorzo = felipe;
	}
}
int main(){
	{
		zorzo = 1;
	}
}
int main(){
	{
		zorzo = pereira[felipe];
	}
}

//expressoes aritmeticas binarias
int main(){
	{
		zorzo = 1/-2;
	}
}
int main(){
	{
		zorzo = 1.5*-2;
	}
}

//expressoes recursivas com parenteses
int main(){
	{
		resultado = (1*2+3-4/5^6);
	}
}
int main(){
	{
		resultado = 1*2+3-4/(5^6);
	}
}
int main(){
	{
		resultado = (1*2+3-4)/5^6;
	}
}
int main(){
	{
		resultado = -(1*2+3-4)/5^6;
	}
}
int main(){
	{
		resultado = +(1*2+3-4/5^6);
	}
}
int main(){
	{
		resultado = -(1);
	}
}
int main(){
	{
		resultado = +(7.2);
	}
}

//expressoes recursivas sem parenteses
int main(){
	{
		resultado = 1*2+3-4/5^6;
	}
}
int main(){
	{
		/*resultado = 2*--1; //dá errado, como deveria */
	}
}
int main(){
	{
		resultado = 1 - -1;
	}
}
int main(){
	{
		//resultado = 1 - --1; //deve dar errado
	}
}
int main(){
	{
		//resultado = 1**1; //deve dar errado
	}
}
int main(){
	{
		resultado = 1 * -1;
	}
}

//input
int main(){
	{
		input 1 * -1;
	}
}

//output
int main(){
	{
		output 1 * -1, 1 * -1;
	}
}
int main(){
	{
		//output 1 * -1,, 1 * -1; //deve dar errado pq tem expressao vazia
	}
}
int main(){
	{
		output 1 * -1, 2, 3;
	}
}
int main(){
	{
		output 1 * -1;
	}
}

//chamada de função
int main(){
	{
		zorzo(arg1, arg2, (2*3*(7-4)/2));
	}
}
int main(){
	{
		zorzo(arg1, arg2, ., (2*3*(7-4)/2));
	}
}

//shifts
int main(){
	{
		zorzo << will;
		zorzo << 12;
		zorzo << 17.07;
		zorzo << -17.07;
		zorzo << +17.07;
		zorzo << vetor[+7];
		zorzo << (2*3*(7-4)/2);
		zorzo$algumcampo << (2*3*(7-4)/2);
		zorzo [17-will/-(-5)] << (2*3*(7-4)/2);
		zorzo[17-will/-(-5)]$algumcampo << (2*3*(7-4)/2);

		zorzo >> will;
		zorzo >> 12;
		zorzo >> 17.07;
		zorzo >> -17.07;
		zorzo >> +17.07;
		zorzo >> vetor[+7];
		zorzo >> (2*3*(7-4)/2);
		zorzo$algumcampo >> (2*3*(7-4)/2);
		zorzo [17-will/-(-5)] >> (2*3*(7-4)/2);
		zorzo[17-will/-(-5)]$algumcampo >> (2*3*(7-4)/2);
	}
}

//return, continue e break
int main(){
	{
		return zorzo(arg1, arg2, ., (2*3*(7-4)/2));
		return will;
		return 12;
	 	return 17.07;
		return -17.07;
		return +17.07;
		return vetor[+7];
		return (2*3*(7-4)/2);
		return -(-zorzo);
		return +(+zorzo);
		return -zorzo;
		continue;
		break;
	}
}
